#include <iostream>
#include <queue>
#include <unordered_set>
#include <cmath>

using namespace std;

struct Square {
    int i, j;
    Square(int _i, int _j) : i(_i), j(_j) {}
};

int knight_moves(const Square& start, const Square& target) {
    // Define all possible knight moves
    vector<pair<int, int>> moves = {
        {-2, -1}, {-2, 1}, {-1, -2}, {-1, 2},
        {1, -2}, {1, 2}, {2, -1}, {2, 1}
    };

    // Perform BFS to find the shortest path
    unordered_set<int> visited;
    queue<pair<Square, int>> q;
    q.push({start, 0});
    while (!q.empty()) {
        auto current = q.front().first;
        int dist = q.front().second;
        q.pop();
        if (current.i == target.i && current.j == target.j)
            return dist;
        int hash = current.i * 10 + current.j;
        if (visited.find(hash) == visited.end()) {
            visited.insert(hash);
            for (const auto& move : moves) {
                int next_i = current.i + move.first;
                int next_j = current.j + move.second;
                if (next_i >= 0 && next_i < 8 && next_j >= 0 && next_j < 8) {
                    q.push({{next_i, next_j}, dist + 1});
                }
            }
        }
    }
    return -1; // No path found
}

int main() {
    char a_col, b_col;
    int a_row, b_row;
    while (cin >> a_col >> a_row >> b_col >> b_row) {
        Square start(a_row - 1, a_col - 'a');
        Square target(b_row - 1, b_col - 'a');
        int moves = knight_moves(start, target);
        cout << "To get from " << a_col << a_row << " to " << b_col << b_row 
             << " takes " << moves << " knight moves." << endl;
    }
    return 0;
}
